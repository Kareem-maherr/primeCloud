rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Allow read access to authenticated users
    match /{allPaths=**} {
      allow read: if request.auth != null;
    }

    // Allow write access to user's own directory
    match /users/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Shared files rules
    match /shared/{fileName} {
      // Allow read if user has access to corresponding Firestore document
      allow read: if request.auth != null && (
        exists(/databases/$(database)/documents/sharedFiles/$(request.resource.name)) &&
        (
          request.auth.uid in get(/databases/$(database)/documents/sharedFiles/$(request.resource.name)).data.sharedWith.map(user => user.id) ||
          request.auth.uid == get(/databases/$(database)/documents/sharedFiles/$(request.resource.name)).data.createdBy
        )
      );

      // Allow create if user is authenticated
      allow create: if request.auth != null;

      // Allow delete only if user is the creator of the corresponding Firestore document
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/sharedFiles/$(request.resource.name)) &&
        request.auth.uid == get(/databases/$(database)/documents/sharedFiles/$(request.resource.name)).data.createdBy;
    }
  }
}
